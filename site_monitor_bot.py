import logging
import asyncio
import aiohttp
import json
from pathlib import Path
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes
)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
BOT_TOKEN = "8089626698:AAGqLnFtz6_TdJQg7UqnQI1u4slt3iQb0NI"
DATA_FILE = Path("urls.json")

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(
    filename="monitor.log",
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

user_urls = {}
unreachable_urls = {}

# === –ó–∞–≥—Ä—É–∑–∫–∞ URL-–æ–≤ ===
def load_data():
    if DATA_FILE.exists():
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(user_urls, f, indent=2)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–∞ ===
async def check_url(url):
    try:
        timeout = aiohttp.ClientTimeout(total=5)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url) as resp:
                return resp.status < 400
    except:
        return False

# === –§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ===
async def monitor_sites(app):
    while True:
        for user_id, urls in user_urls.items():
            for url in urls:
                is_up = await check_url(url)
                was_unreachable = unreachable_urls.get((user_id, url), False)

                if not is_up and not was_unreachable:
                    await app.bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –°–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
                    unreachable_urls[(user_id, url)] = True
                    logging.warning(f"{url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (user {user_id})")

                elif is_up and was_unreachable:
                    await app.bot.send_message(chat_id=user_id, text=f"‚úÖ –°–∞–π—Ç —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω: {url}")
                    unreachable_urls[(user_id, url)] = False
                    logging.info(f"{url} —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω (user {user_id})")

        await asyncio.sleep(150)

# === –ö–æ–º–∞–Ω–¥—ã Telegram ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π /add <url1> <url2> ... —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    urls = update.message.text.split()[1:]

    if not urls:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /add https://example.com")
        return

    user_urls.setdefault(user_id, [])
    for url in urls:
        if url not in user_urls[user_id]:
            user_urls[user_id].append(url)

    save_data()
    await update.message.reply_text("‚úÖ URL-—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

async def list_urls(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    urls = user_urls.get(user_id, [])
    if urls:
        await update.message.reply_text("üîç –¢–µ–∫—É—â–∏–µ —Å–∞–π—Ç—ã:\n" + "\n".join(urls))
    else:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")

async def clear(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_urls[user_id] = []
    save_data()
    await update.message.reply_text("üßπ –°–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.")

# === –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ===
async def main():
    global user_urls
    user_urls = load_data()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("list", list_urls))
    app.add_handler(CommandHandler("clear", clear))

    asyncio.create_task(monitor_sites(app))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã...")
    await app.run_polling()

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
if __name__ == "__main__":
    import sys
    import warnings

    # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Windows + –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    if sys.platform == "win32":
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    warnings.filterwarnings("ignore", category=DeprecationWarning)
    warnings.filterwarnings("ignore", category=RuntimeWarning)

    async def safe_main():
        try:
            await main()
        except Exception:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", exc_info=True)

    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)

    loop.create_task(safe_main())
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        print("\n‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
